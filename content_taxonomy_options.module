<?php

// $Id$

/**
 * @file
 * Defines a widget type for content_taxonomy for options
 **/

/**
 * Implementation of hook_help().
 **/
function content_taxonomy_options_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines a widget type for content_taxonomy for options (selects, radios/checkboxes). <em>Note: Requires content.module.</em>');
  }
}

/**
 * Implementation of hook_widget_info().
 */
function content_taxonomy_options_widget_info() {
  return array(
    'content_taxonomy_options' => array(
      'label' => t('Checkboxes/Radios'),
      'field types' => array('content_taxonomy'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'content_taxonomy_select' => array(
      'label' => t('Select List'),
      'field types' => array('content_taxonomy'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
  return $items;
}

/**
 * Implementation of hook_widget_settings
 */
function content_taxonomy_options_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      
      $options_term = array();
      $options_term[0] = '---';
      foreach (taxonomy_get_vocabularies() as $voc) {
        foreach (taxonomy_get_tree($voc->vid) as $term) {
          $options_term[$voc->name][$term->tid] = str_repeat('- ', $term->depth) . $term->name;
        }
      }      
      $form['optgroup'] = array(
        '#type' => 'fieldset',
        '#title' => t('OptGroups'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => t('This setting is optional and only relevant for select lists'),
        '#weight' => 10,
      );
      
      $form['optgroup']['group_tid'] = array(
        '#title' => t('Parent for grouping in first bar'),
        '#type' => 'select',
        '#default_value' => isset($widget['group_tid']) ? $widget['group_tid'] : 0,
        '#options' => $options_term,
      );
      return $form;
      
    case 'save':
      return array('group_tid');
  }
}

/**
 * Implementation of hook_widget().
 */
function content_taxonomy_options_widget(&$form, &$form_state, $field, $items, $delta = NULL) {
  $element = array(
    '#type' => ($field['widget']['type'] == 'content_taxonomy_select') ? 'optionwidgets_select' : 'optionwidgets_buttons', 
    '#default_value' => !empty($items) ? $items : array(),
  );
  
  return $element;
}

?>
