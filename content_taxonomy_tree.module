<?php

// $Id$

/**
 * Implementation of hook_help().
 **/
function content_taxonomy_tree_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines a widget type for content_taxonomy with a tree form. <em>Note: Requires content.module and the taxonomy manager.</em>');
  }
}


/**
 * Implementation of hook_theme().
 */
function content_taxonomy_tree_theme() {
  return array(
    'content_taxonomy_tree' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}


/**
 * Implementation of hook_widget_info().
 */
function content_taxonomy_tree_widget_info() {
  return array(
    'content_taxonomy_tree' => array(
      'label' => t('Tree'),
      'field types' => array('content_taxonomy'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
  return $items;
}

/**
 * Implementation of hook_widget_settings
 */
function content_taxonomy_tree_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['expand_all'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Expand whole tree by default'),
        '#default_value' => isset($widget['expand_all']) ? $widget['expand_all'] : 0,
        '#description' => t('Otherwise only branches, where a term is selected get expanded by default'),
      );
      return $form;

    case 'save':
      return array('expand_all');
  }
}


function content_taxonomy_tree_elements() {
  return array(
    'content_taxonomy_tree' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('content_taxonomy_tree_process'),
      '#element_validate' => array('content_taxonomy_tree_validate'),
      '#autocomplete_path' => FALSE,
      ),
    );
}

/**
 * Implementation of hook_widget().
 */
function content_taxonomy_tree_widget(&$form, &$form_state, $field, $items, $delta = NULL) {
  $element = array(
    '#type' => 'content_taxonomy_tree',
    '#default_value' => isset($items) ? $items : NULL,
  );
  return $element;
}


function content_taxonomy_tree_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $field_key  = $element['#columns'][0];
  
  if (!$form_state['submitted'] || $form_state['clicked_button']['#value'] == t('Preview')) {
    $element['#value'] = content_taxonomy_tree_data2form($element, $element['#value'], $field);
  }

  $element[$field_key] = array(
    '#type' => 'taxonomy_manager_tree',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#vid' => $field['vid'],
    '#parent' => $field['tid'], 
    '#default_value' => is_array($element['#value']) ? $element['#value'] : array(),
    '#render_whole_tree' => TRUE,
    '#pager' => FALSE,
    '#add_term_info' => FALSE,
    '#expand_all' => $field['widget']['expand_all'],
    '#multiple' => isset($field['multiple']) ? $field['multiple'] : FALSE,
    '#field_name' => $element['#field_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
  );
  return $element;
}

function content_taxonomy_tree_validate($element, &$form_state) {
  $field_key  = $element['#columns'][0];

  $selected_terms = $form_state['values'][$element['#field_name']][$field_key]['selected_terms'];
  if (!is_array($selected_terms)) $selected_terms = array();
  
  if ($field['#required'] && count($selected_terms) < 1) {
    form_set_error($field['field_name'] .'][value', t('This field is required'));
  }
  
  $values = content_transpose_array_rows_cols(array($element['#columns'][0] => array_values($selected_terms)));
  form_set_value($element, $values, $form_state);
}

function content_taxonomy_tree_data2form($element, $values, $field) {
  $terms = array();
  foreach ($values as $delta => $entry) {
    $terms[] = $entry['value'];
  }
  return $terms;
}


function theme_content_taxonomy_tree($element) {
  return $element['#children'];
}
